name: CutBox Test/Build CI

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    name: CutBox Build
    runs-on: macos-11
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: CI bin check
        run: |
          for b in ci_is_production ci_get_release_info ci_update_info_plist ci_update_cutbox_homebrew setup test build
          do
            if [[ -x bin/$b ]]; then
              echo "[✓] bin/$b executable."
            else
              echo "[❌] bin/$b - missing or non-executable" && exit 1
            fi
          done

      - name: ssh-agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
         ssh-private-key: ${{ secrets.SUBMODULE_ID }}

      - name: Check production release
        run: |
          bin/ci_is_production

      - name: Checkout submodules
        run: |
          git submodule update --init --recursive

      - name: Setup
        run: |
          bin/setup

      - name: Test
        run: |
          bin/test

      - name: Build
        run: |
          bin/build

      - name: Make DMG
        run: |
          bin/cutbox_make_dmg CutBox.dmg

      - name: Get Release Info
        run: |
          bin/ci_get_release_info

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.RELEASE }}
          release_name: ${{ env.RELEASE }}
          draft: ${{ env.PRODUCTION_RUN != 1}}
          prerelease: false

      - name: Upload CutBox.dmg
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: CutBox.dmg
          asset_name: CutBox-${{env.CUTBOX_VERSION}}.dmg
          asset_content_type: application/octet-stream

      - name: Update Info.plist
        run: |
          bin/ci_update_info_plist

      - name: Update CutBox homebrew
        run : |
          # bin/ci_update_cutbox_homebrew
          pushd homebrew-cutbox || echo "Cannot enter ./homebrew-cutbox" && exit 1
          git checkout main
          git pull --rebase

          BREW_VERSION="$(grep "VERSION: " README.md | awk '{ print $2 }')"

          if [[ "$BREW_VERSION" != "$RELEASE" ]]; then
            bin/update-readme $RELEASE
            bin/update-formula $RELEASE
            bin/update-cask $RELEASE
            bin/test-cask || echo "Test Cask failed" && exit 1
            bin/test-formula || echo "Test Formula failed" && exit 1
          fi

          if [[ "$PRODUCTION_RUN" == "1" ]]; then
            # Update Homebrew Cask and Formula
            echo "Release CutBox $CUTBOX_VERSION via homebrew"
            git add \
                README.md \
                Formula/cutbox.rb \
                Casks/cutbox.rb
            git commit -m "Update Homebrew: CutBox $CUTBOX_VERSION"
            git tag $CUTBOX_VERSION
            git push --all

            popd || echo "Cannot exit ./homebrew-cutbox" && exit 1

            # Synchronize Homebrew Submodule
            git add homebrew-cutbox
            git commit -m "sync homebrew ($CUTBOX_VERSION)"
            git pull --rebase
            git push
          else
            echo "Commit was not tagged as [release]"
          fi



#### TODO :
#### Web update
