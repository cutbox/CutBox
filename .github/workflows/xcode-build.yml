name: CutBox Test/Build CI

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    name: CutBox Build
    runs-on: macos-11
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup
        run: |
          bin/setup

      - name: Test
        run: |
          bin/test

      - name: Build
        run: |
          bin/build

      - name: Make DMG
        run: |
          bin/cutbox_make_dmg CutBox.dmg

      - name: Get Release Info
        run: |
          echo "RELEASE=$(bin/dev_version)-$(bin/build_number)" >> $GITHUB_ENV
          echo "CUTBOX_VERSION=$(bin/dev_version)" >> $GITHUB_ENV

      - name: Release Info
        run: echo ${{ env.RELEASE }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.RELEASE }}
          release_name: ${{ env.RELEASE }}
          draft: true

      - name: Upload CutBox.dmg
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: CutBox.dmg
          asset_name: CutBox-${{env.CUTBOX_VERSION}}.dmg
          asset_content_type: application/octet-stream

      - name: Update Info.plist
        run: |
          git add CutBox/CutBox/Info.plist
          git commit -m "CutBox Release: ${{env.RELEASE}}"
          git push origin master
          git show

      - name: Update CutBox homebrew
        run : |
          export CUTBOX_VERSION="${{ env.CUTBOX_VERSION }}"
          cd homebrew-cutbox
          git checkout main
          BREW_VERSION="$(grep "VERSION: " README.md | awk '{ print $2 }')"
          echo "BREW_VERSION..: $BREW_VERSION"
          echo "CUTBOX_VERSION: $CUTBOX_VERSION"
          if [[ "$BREW_VERSION" != "$CUTBOX_VERSION" ]]; then
            bin/update-readme $CUTBOX_VERSION
            bin/update-formula $CUTBOX_VERSION
            bin/update-cask $CUTBOX_VERSION
            echo "================================================================================"
            git --no-pager diff --color
            bin/test-cask || exit 1
            bin/test-formula || exit 1
          else
            echo "Version $CUTBOX_VERSION already on Brew" && exit 1
          fi
          cutbox_commit="$(git -C .. show -s --format=%B)"
          if [[ "$cutbox_commit" =~ "\[release\]"  ]]; then
            echo "Release CutBox $CUTBOX_VERSION via homebrew"
            git add \
              README.md \
              Formula/cutbox.rb \
              Casks/cutbox.rb
            git commit -m "Update Homebrew: CutBox $CUTBOX_VERSION"
            git pull --rebase
            git tag $CUTBOX_VERSION
            git push
            git push --tags
            cd ..
            git add homebrew-cutbox
            git commit -m "sync homebrew ($CUTBOX_VERSION)"
            git pull --rebase
            git push
          else
            echo "Commit was not tagged as [release]"
            echo "----"
            echo "$cutbox_commit"
          fi

#### TODO :
#### Web update
